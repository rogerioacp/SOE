enclave{

	trusted{
			//Entry points to the enclave

			public void initSOE([in, string] const char* tName, [in, string]
            const char* iName, int tNBlocks, [in, size=fanout_size] int* fanout,
            unsigned int fanout_size, unsigned int nlevels, int inBlocks, unsigned int tOid, unsigned int iOid, unsigned int functionOid, unsigned int indexHandler, [in, size=pgDescSize] char* pg_attr_desc, unsigned int pgDescSize);

			public void initFSOE([in, string] const char* tName, [in, string]
            const char* iName, int tNBlocks, [in, size=fanout_size] int* fanout,
            unsigned int fanout_size, unsigned int nlevels,  unsigned int tOid, unsigned int iOid, [in, size=pgDescSize] char* pg_attr_desc, unsigned int pgDescSize);

			public void addIndexBlock([in, size=blockSize] char* block,
			unsigned int blockSize, unsigned int offset, unsigned int level);
			
			public void addHeapBlock([in, size=blockSize] char* block,
			unsigned int blockSize, unsigned int blkno);

			public void insert([in, size=tupleSize] const char* heapTuple, unsigned int tupleSize,  [in, size=datumSize] char* datum, unsigned int datumSize);

			public int getTuple(unsigned int opmode, unsigned int opoid, [in, size=scanKeySize] const char* scanKey, int scanKeySize, [out, size=tupleLen] char* tuple, unsigned int tupleLen, [out, size=tupleDataLen] char* tupleData, unsigned int tupleDataLen);

			/*public int getTupleOST(unsigned int opmode, unsigned int opoid,
             * [in, size=scanKeySize] const char* scanKey, int scanKeySize,
             * [out, size=tupleLen] char* tuple, unsigned int tupleLen, [out,
             * size=tupleDataLen] char* tupleData, unsigned int tupleDataLen);*/

			public void insertHeap([in, size=tupleSize] const char* heapTuple, unsigned int tupleSize);		
	};

   /* Ocalls are defined in an external file with code that is executed on an untrusted environment. When this functions are called from within the enclave, the processor exits the enclave mode and calls the defined function.*/
	untrusted{
		void oc_logger([in, string] const char * str);

		void outFileInit([in, string] const char *filename, [in, size=pagesSize] const char* pages, unsigned int nblocks, unsigned int blocksize, int pagesSize, int initOffset);

		void outFileRead([in, string] const char* filename, [out, size=pagesSize]
        char* page, int pagesSize, [out, size=posSize] int* positions, int
        posSize);

		void outFileWrite( [in, string] const char* filename,  [in,
        size=pagesSize] const char* pages, int pagesSize, [out, size=posSize] int* positions, int
        posSize));

		void outFileClose([in, string] const char* filename);

	};

};
